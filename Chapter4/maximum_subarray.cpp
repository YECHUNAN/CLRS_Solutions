using namespace std::chrono;

vector<int> brute_force_max_subarray(vector<int> &A) {
    int best_sum = -99999999;
    int best_low = -1;
    int best_high = -1;
    for (int i = 0; i < A.size(); i++) {
        int sum = A[i];
        if (sum > best_sum) {
            best_sum = sum;
            best_low = i;
            best_high = i;
        }
        for (int j = i+1; j < A.size(); j++) {
            sum += A[j];
            if (sum > best_sum) {
                best_sum = sum;
                best_high = j;
            }
        }
    }
    return vector<int>({best_low, best_high, best_sum});
}

vector<int> brute_force_max_subarray_with_range(vector<int> &A, int low, int high) {
    int best_sum = -99999999;
    int best_low = -1;
    int best_high = -1;
    for (int i = low; i < high; i++) {
        int sum = A[i];
        if (sum > best_sum) {
            best_sum = sum;
            best_low = i;
            best_high = i;
        }
        for (int j = i+1; j < A.size(); j++) {
            sum += A[j];
            if (sum > best_sum) {
                best_sum = sum;
                best_high = j;
            }
        }
    }
    return vector<int>({best_low, best_high, best_sum});
}

vector<int> find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    int left_sum = -9999999; // Assume this is the lowest bound
    int max_left = -1;
    int max_right = -1;
    int sum = 0;
    for (int i = mid; i >= low; i--) {
        sum = sum + A[i];
        if (sum > left_sum) {
            left_sum = sum;
            max_left = i;
        }
    }
    int right_sum = -9999999; // Assume this is the lowest bound
    sum = 0;
    for (int j = mid+ 1; j < high; j++) {
        sum = sum + A[j];
        if (sum > right_sum) {
            right_sum = sum;
            max_right = j;
        }
    }
    return vector<int>({max_left, max_right, left_sum + right_sum});
}

vector<int> find_maximum_subarray(vector<int> &A, int low, int high) {
    if (high == low) {
        return vector<int>({low, high, A[low]});
    } else {
        int mid = (low + high) / 2;
        vector<int> left_result = find_maximum_subarray(A, low, mid);
        int left_low = left_result[0];
        int left_high = left_result[1];
        int left_sum = left_result[2];

        vector<int> right_result = find_maximum_subarray(A, mid + 1, high);
        int right_low = right_result[0];
        int right_high = right_result[1];
        int right_sum = right_result[2];

        vector<int> cross_result = find_maximum_crossing_subarray(A, low, mid, high);
        int cross_low = cross_result[0];
        int cross_high = cross_result[1];
        int cross_sum = cross_result[2];
        
        if (left_sum >= right_sum && left_sum >= cross_sum) {
            return vector<int>({left_low, left_high, left_sum});
        } else if (right_sum >= left_sum && right_sum >= cross_sum) {
            return vector<int>({right_low, right_high, right_sum});
        } else {
            return vector<int>({cross_low, cross_high, cross_sum});
        }
    }
}

vector<int> find_maximum_subarray_with_brute_force(vector<int> &A, int low, int high) {
    if (high - low + 1 <= 870) {
        return brute_force_max_subarray_with_range(A, low, high);
    } else {
        int mid = (low + high) / 2;
        vector<int> left_result = find_maximum_subarray(A, low, mid);
        int left_low = left_result[0];
        int left_high = left_result[1];
        int left_sum = left_result[2];

        vector<int> right_result = find_maximum_subarray(A, mid + 1, high);
        int right_low = right_result[0];
        int right_high = right_result[1];
        int right_sum = right_result[2];

        vector<int> cross_result = find_maximum_crossing_subarray(A, low, mid, high);
        int cross_low = cross_result[0];
        int cross_high = cross_result[1];
        int cross_sum = cross_result[2];
        
        if (left_sum >= right_sum && left_sum >= cross_sum) {
            return vector<int>({left_low, left_high, left_sum});
        } else if (right_sum >= left_sum && right_sum >= cross_sum) {
            return vector<int>({right_low, right_high, right_sum});
        } else {
            return vector<int>({cross_low, cross_high, cross_sum});
        }
    }
}

vector<int> recursive_max_subarray(vector<int> &A) {
    return find_maximum_subarray(A, 0, A.size() - 1);
}

vector<int> recursive_max_subarray_with_brute_force(vector<int> &A) {
    return find_maximum_subarray_with_brute_force(A, 0, A.size() - 1);
}

void test_brute_force(vector<int> &A) {
    auto start = high_resolution_clock::now();
    for (volatile int i = 0; i < 10; i++) {
        vector<int> result = brute_force_max_subarray(A);
    }
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
    cout << "brute_force " << duration.count() << "us for n = " << A.size() << endl;
}

void test_recursive(vector<int> &A) {
    auto start = high_resolution_clock::now();
    for (volatile int i = 0; i < 10; i++) {
        vector<int> result = recursive_max_subarray(A);
    }
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
    cout << "recursive   " << duration.count() << "us for n = " << A.size() << endl;
}

void test_recursive_with_brute_force(vector<int> &A) {
    auto start = high_resolution_clock::now();
    for (volatile int i = 0; i < 10; i++) {
        vector<int> result = recursive_max_subarray_with_brute_force(A);
    }
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
    cout << "recursive+  " << duration.count() << "us for n = " << A.size() << endl;
}

int main() {
    // n winner
    // 100 brute_force
    // vector<int> A({-33, 53, -39, -76, -85, -27, 84, 80, -54, -75, 97, -18, -57, 49, -42, 88, 48, 50, -83, 65, -47, 77, 66, 60, -66, -67, 51, -34, -29, 78, -96, -89, -34, 96, 40, 36, 13, 10, 3, 20, -11, 90, 30, 45, 36, 18, -62, 46, 73, 64, 54, -36, -71, 43, 90, 56, -85, -99, -16, 4, -92, -51, 40, 35, -58, -25, -82, 47, -6, -36, -88, 66, 56, 22, -1, -93, -14, -91, 30, 75, 77, -44, 32, -92, -5, 63, 63, 16, -43, -71, -72, -84, -63, 66, 76, 74, 42, 73, 86, 15});
    
    // 500 brute_force
    // vector<int> A({-92, -100, -16, -35, -52, -12, -84, 28, 7, 26, 55, -92, -2, -17, -27, -90, -8, 7, -21, -17, 87, -65, 60, -94, 7, -7, -81, -66, 55, -52, -70, -32, 88, 12, 73, 79, 99, -45, -85, 25, 47, -2, 19, 49, 66, -65, 46, -19, 47, 80, 7, -40, -38, -19, 15, 35, 29, 18, 68, -18, 84, 48, -98, -40, 51, 40, -35, -67, 32, -77, -33, 58, -83, -87, 31, 35, 24, 84, 52, 83, 68, -17, -51, -93, -18, -88, 29, -30, 21, 31, 11, 39, 91, 35, 22, 60, 19, -96, -73, 23, -64, -74, 76, -19, 29, -29, -100, 68, -89, -22, 81, -2, -51, -31, 31, 11, -100, -3, -25, -44, 12, -16, -2, -96, 60, 96, -82, -10, 29, 99, 43, -20, -16, -21, 91, -62, 60, 47, 39, 65, -47, -81, 10, 25, 22, 48, 83, 71, 64, 17, -11, -77, -97, -71, 2, -83, -29, 15, 57, -92, 97, -25, -67, -42, 6, 94, -34, -13, -81, -77, -33, -14, 31, -16, -98, 55, -33, -35, 53, 56, 43, 74, -45, -83, 74, -4, -43, -6, 49, -36, 67, 54, -11, 71, -81, -56, 27, -10, 78, 21, -8, -62, -75, 98, 55, -10, 2, -63, 16, 17, 87, 67, -19, 47, -22, 23, -74, -46, -15, -27, 31, -1, -56, -87, -41, -16, 93, -5, -20, 64, -81, -89, -30, 89, -84, 5, -65, -68, -30, -44, -76, -69, -2, 21, 49, 21, 29, 22, -94, 21, 81, 44, 96, -90, 90, 79, 88, -56, -77, -51, 63, 92, -96, 94, 30, 57, 20, 17, 56, 85, -38, 28, -94, 32, -71, -90, 9, -54, 67, -16, -53, -96, -3, 37, 72, -91, -74, 58, 87, 17, 85, 88, 54, 19, -37, 20, -15, -9, 35, -95, -22, 81, -95, 76, -52, -32, 49, -8, -52, -97, -18, -10, -6, 64, -81, -61, 64, -41, -90, 79, -59, -73, 3, -83, 7, -80, -47, 36, -92, -69, -6, 19, 63, -15, -10, -84, 36, -92, -16, 32, -48, -47, -52, 58, -58, 18, 66, 14, 78, -69, -65, 99, -100, -12, 69, 63, 78, -16, 64, 26, 99, -26, 9, 36, 99, -22, 4, 94, 72, 80, 86, 94, 64, 74, 86, -57, 16, 95, 84, 91, -72, 23, -69, -25, 49, -17, -21, -91, -21, -49, 0, -80, 62, 8, -100, 63, -23, -91, 38, 71, -58, 38, -98, -81, 57, -56, 80, 75, 71, 67, 20, -29, -82, 93, -8, 53, -57, -14, -65, -84, 59, -62, 61, 11, -21, 85, -94, 78, -64, 11, -83, -53, 15, -29, 66, 46, 56, -77, 3, -32, 16, 6, -7, -89, 77, -91, -63, 92, 97, 17, 94, 84, -25, 52, 60, -2, -40, 81, -4, -55, -41, 21, -51, 60, 38, 1, -57, 99, -93, 32, -100, 49, -43, 7, -79, -88, -56, 86, 98, -75, -2, 99, -19, -62, -55, -52, 59, -9, 23, -62, -62, -78, -24, -4, -19, 97, -41, 63, 59, -98});
    
    // 750 brute-force
    // vector<int> A({-28, 66, 37, 5, -39, -89, -49, -15, -50, -55, 24, -86, 76, 87, -93, 95, 16, -18, -2, -83, -28, 4, -22, 68, -44, -37, -81, 39, 1, -80, 37, -20, -56, 96, -93, 16, 82, -78, 75, 87, -33, 11, 36, 9, 80, -51, 5, -28, 71, -72, -100, 73, 44, -23, -92, 59, -57, 49, -47, -5, 7, -23, -58, -67, 32, -8, 36, 63, -11, 25, -71, 21, -37, -33, 96, -82, 11, -24, 23, 64, -7, 69, 100, 73, -85, -60, 74, -63, -98, 50, -68, -30, -6, 23, 34, 39, -8, 3, -87, 11, 17, 39, 75, -25, 1, -89, -21, 57, 23, 10, -58, 49, -3, -56, 70, 77, 11, -94, 15, -37, 99, 60, 30, 53, -33, -59, -82, -23, 16, -23, 45, -11, 70, 100, -77, 35, -14, 35, 64, 43, -24, -45, -95, 41, -75, -86, -45, -12, 7, -67, -3, -58, -26, 79, 81, -88, 87, -63, -39, -20, -86, 48, -29, 100, -77, -77, 17, -47, 82, 44, 30, 5, 81, 32, 69, -31, 45, 4, -99, 86, 5, 24, 75, 49, -33, 52, -13, -30, -25, 56, 87, -6, 77, 37, 16, -35, 79, -71, -87, -64, -27, -80, -61, -84, 13, 92, -50, 25, -77, 45, -23, 76, 18, 2, 51, -11, 26, -7, -14, 3, 25, -73, -50, 80, 35, -31, -51, -40, -99, 34, -58, 13, 73, -26, 6, 8, -71, -31, 96, 12, -67, -85, 21, -71, -18, -6, 90, 75, -61, -41, -29, -47, 34, 39, -21, -20, -37, 27, -21, -86, 26, -72, -11, -31, -29, -56, 91, -77, 91, 32, 43, -59, -100, -85, 58, -52, -78, 73, 5, 8, -45, 8, -74, -98, 89, -95, -95, 68, -54, -66, -2, 47, 50, 81, -93, 58, -52, -20, 34, -38, 30, -95, -27, 71, 38, 95, -79, 62, 24, 52, 63, -43, -14, 55, 95, -24, -85, 50, 70, -14, 11, 69, 19, -45, -22, 2, 14, 65, 14, -90, -30, -86, 82, 49, -7, 6, -51, 40, -4, -25, 27, -88, 15, -35, -10, 3, 76, -77, -32, 14, -5, -15, 6, 76, 32, 19, 50, -70, 79, -13, 31, -36, -71, -26, -5, -57, -10, 64, 38, 89, 95, 51, 44, -23, -90, 6, 84, 88, 82, 83, 4, 60, 100, -32, 66, 53, -75, -35, -77, -69, -27, 37, 17, 30, -36, -70, 32, -32, -4, -14, -59, -83, 82, 42, 96, -56, 57, 48, 71, -65, 67, -27, -68, -49, -99, 79, -48, -23, 0, -90, 71, -95, -93, 98, 3, -78, 79, 5, -26, 27, 90, -42, 73, -16, -80, 51, -53, 49, 77, 38, 32, -74, 75, -27, -56, -19, 82, 64, -75, -83, 1, -80, -59, -63, 22, -48, 4, -4, -11, -70, 34, -42, -81, -21, -98, 0, 39, 96, -90, -82, -24, 63, 37, 47, -70, 79, 41, 29, 39, -35, 61, 90, -25, 25, -88, -99, -86, -94, 75, -77, 17, -35, 11, 14, 47, -41, 0, 36, 85, 80, 2, 13, 37, -49, -34, -18, -11, -62, 10, -52, 25, 15, 4, 93, 17, 100, 88, -1, 5, 31, 84, 55, 75, -23, 47, 98, -83, -14, 84, 77, -28, -49, 23, 74, -44, 71, -36, -15, 26, -40, 89, 53, 89, -52, 97, -99, 27, 55, 49, -90, 41, -6, 10, 13, -37, 48, 38, -1, 35, 28, -44, -78, 9, 97, -70, -41, -37, 55, -60, -69, 62, 27, 24, 44, 10, 22, -20, -85, -32, -83, -28, -58, 20, 17, -40, 97, 70, 2, -59, 23, 74, 98, -96, -80, 76, -19, -79, 83, -33, -21, 66, 84, 47, 87, 13, -61, -80, 77, -57, -70, -40, 8, -62, 36, -88, 4, 85, 36, 95, -3, -81, 73, 62, -5, 67, 55, -67, -77, 25, 54, 2, 49, 97, -53, -57, -21, -5, -82, -40, 89, 81, -65, -88, -48, -7, -96, 18, 22, 21, 13, -25, 70, 92, 56, -16, -99, 7, 81, 31, 73, -9, 84, 32, 79, 3, 32, 66, 36, -77, 32, 31, -8, -20, 28, -15, -72, -70, 46, 47, -43, -2, 89, -35, 5, 81, 52, -79, -39, 51, -8, -42, -83, 90, -42, 16, 73, 49, 28, 54, 47, 8, 80, -24, 79, 66, 89, -67, 4, 37, 39, -33, -14, 28, 17, 5, 26, 19, 67, 47, 92, 85, -85, -25, 90, 73, 78, 86, -33, 30, 99, 36, -89, -32, -64, 15, -55, 14, -33, 100, 74, -25, -94, 0, 81, -67, -99, 5, 2, -17, 6});
    
    // 850 brute-force
    // vector<int> A({-51, 53, -64, 18, -16, 60, -20, -6, 26, 21, 7, 4, -64, 40, 25, 91, -81, -4, 29, 89, 19, 6, -43, 18, 22, 20, -84, 74, 22, -32, 78, -63, -41, 18, 14, 62, -69, -30, 50, -17, -5, 90, -88, 80, 71, -24, 100, 40, 23, 71, 15, 33, 29, 86, -89, -9, 73, -100, -67, -15, -80, 29, 91, 3, -95, 34, 25, 98, 79, -68, 29, 8, -24, -37, -63, 0, -43, -99, -14, 98, 80, -27, 62, -95, -64, 34, 45, -45, -18, -89, 18, 45, 55, 16, 57, 52, 3, 99, -78, 5, -98, -13, -31, 70, 64, -66, 40, -85, 71, -78, -89, -56, 52, -27, 14, 45, 48, -72, 31, -46, -86, -91, -40, 58, 60, -57, -31, 10, -80, -39, -89, -60, -41, -18, -69, 89, -23, 89, 24, 68, 81, 88, -88, -8, -87, 99, -50, 10, -90, 91, -58, -92, 24, 87, 42, -26, 91, -86, 86, -9, 11, 2, 61, -62, -67, 17, 6, -95, -37, -98, 36, -67, -2, 77, 57, 31, 16, 75, -78, -88, -10, -59, 17, -54, 50, 97, -74, 76, -35, -8, 9, -76, 98, -10, -37, 52, -5, -81, 92, 89, 78, -50, 56, 49, 21, -53, 20, -59, -89, -20, 96, 86, 40, -75, -48, -64, 59, 43, 58, -22, -86, -14, 68, 59, -100, -50, -39, -27, 98, -34, 71, 74, -10, -76, -13, 44, 64, -6, -62, -42, 36, -66, 43, 85, -21, 13, -29, -46, -86, 66, 34, -11, 3, -56, 32, -57, 54, -3, 17, -89, 28, -24, -93, 9, -6, 67, 68, 84, -24, 38, 21, 9, -38, 98, 81, -8, 55, 69, -71, -62, 96, -8, 9, -76, -18, 51, 8, 62, 31, -52, -16, 24, 46, -9, 2, 24, 13, 10, 55, -50, -91, 23, -49, -47, 32, -44, 55, 6, 8, 55, 45, 14, -37, -45, -95, 11, -63, -7, -90, 45, -33, 65, 32, 78, 0, -72, -68, 35, 61, -72, -73, -1, 47, 97, -26, -66, -56, -49, 54, -36, 98, 37, 43, -77, -52, -91, 52, -74, 82, 37, 76, 69, -2, 31, -21, 48, -16, 86, -5, 35, 80, -58, 4, 28, -85, -50, 69, -11, 30, 30, -43, -21, -28, 55, 85, 67, -35, -12, -15, -33, 36, -96, -34, 63, -91, -39, 45, 36, -79, -49, -66, 88, 95, -43, 30, 2, 95, -88, 54, -19, 57, 81, 29, 28, 58, -29, -39, -34, 51, -42, 61, 30, -2, -35, 23, -81, -47, -33, -28, -98, -66, 75, 1, -5, 39, 62, 81, 71, 5, 0, 65, -77, -21, 12, -2, 75, 78, 99, 23, 49, -56, 37, 17, -17, 43, 58, 71, -80, 28, -70, 31, 3, 63, 28, 13, 72, -97, 82, -84, -81, 32, -62, -70, -3, 28, 93, 74, -53, -75, 36, -72, 25, -43, 96, 49, -5, 77, 56, 59, -7, 66, 97, -32, 28, 90, 19, -88, 29, 71, 48, -7, 61, -21, 78, -61, 80, 4, -38, 20, 57, 45, -21, 44, -95, 47, -72, 52, -73, 85, 58, -82, 11, 0, -92, 54, 54, 68, 66, 90, -26, -93, 26, -48, 15, 63, 29, 34, 17, -10, -44, 100, -76, 90, 48, -14, 65, -76, -32, -87, -54, -48, 80, 38, -10, -47, 87, -36, 8, -20, 69, -15, 57, 36, 56, -60, -10, -56, 31, -91, 27, 53, 37, 48, -50, 92, -7, -10, 61, -63, -15, 76, -1, 14, 88, -4, 49, -21, 54, 60, -49, 97, -56, -92, 76, 80, 5, -79, -26, 80, -91, 3, 71, 63, 69, -91, -7, 24, 97, -43, 100, 97, 35, 10, -70, 50, 44, 97, -67, -31, 25, 32, 2, 75, -63, 98, 21, 68, -72, 28, -37, 71, -74, 40, -17, -98, -23, 10, 31, 46, -73, -100, -78, -36, -71, -11, 31, 72, 67, -1, 13, -57, 40, 26, -59, 92, 65, -60, -69, -82, -72, 15, -97, -24, -2, -74, -92, -25, 32, 73, -30, -9, -75, 53, -61, 8, 12, 1, -77, -10, -73, -16, 57, -7, -13, 98, 87, 80, 77, 1, -17, -86, 57, 88, -68, 77, 31, 16, -97, 88, -17, 23, -42, -75, 44, 47, -83, 71, -49, 95, 1, -66, -29, 41, 79, 94, 37, 71, 58, -55, -99, -40, -100, 18, 35, 71, 91, 8, 54, 57, -23, -50, 74, 59, 33, 80, -100, 7, 3, -88, -80, 21, -70, 30, -19, -11, 58, -58, -48, -46, -46, 48, -10, 75, 14, 97, -83, 35, -42, 70, -98, -15, 14, 51, -88, -10, 40, -64, -80, 1, -26, -66, 94, 96, -51, 3, -97, 79, -6, -61, 41, -42, -12, 80, -12, 7, 18, 36, -32, 65, -1, 66, 22, -22, 6, -4, -63, -1, 32, -13, -38, 30, 62, 72, 39, -72, -21, -5, -61, -47, -36, -21, -67, 94, -12, 93, 57, 41, 53, -90, 34, -6, -16, -72, 83, 58, 24, 48, -7, 19, 93, -7, -91, -54, 59, 18, 30, -13, -87, 25, 27, 72, 9, -29, 45, 82, 64, 38, 55, -18, -27, -34, -17, 87, 63, 78, -16, 12, -3, -68, 92});
    
    // 875 recursive
    // vector<int> A({7, 70, 80, 44, -14, -46, -94, -56, -34, 50, 32, 43, -70, 15, -71, 53, -48, 97, 15, 60, 16, 14, 51, -46, -28, 27, -97, 18, 20, -41, 64, -58, 34, -88, -4, 1, -54, 34, -9, 30, 30, -56, 40, -30, -17, 23, -4, -82, -29, 66, -97, 74, -83, 51, -37, -51, 95, -15, -83, -15, -26, -61, 91, 92, 76, -35, 80, 89, 34, -7, -85, -40, 57, 22, -43, 81, 7, 39, 59, -6, -28, -49, -39, -65, 33, -1, 62, 17, 83, 22, 27, 89, 96, 54, 30, -100, -50, -22, -51, 35, 95, -39, 88, -49, -6, -88, -8, 79, -93, 27, 61, 49, 88, 49, -16, -40, -88, 83, -51, -5, -48, 66, 74, -5, -77, 57, -92, 23, -4, 20, 62, -58, -76, -100, -13, 61, -47, 62, 34, 64, -58, 85, -21, 97, 83, 61, 44, 100, -67, -45, -2, 96, 25, 33, 47, -24, -73, 55, 71, 77, -33, -96, -92, 65, 86, 53, 99, -15, 22, 3, -7, -13, 69, 74, 96, -46, 28, 69, -14, -76, -97, 85, 97, 27, 90, 6, -87, -42, 98, -73, -14, 29, 21, 78, -73, -5, -4, -31, -4, -99, 81, -56, -37, -15, 40, 22, 34, -33, 74, 39, -62, 42, -92, 13, 94, -77, -40, 82, 96, -85, 14, 53, 85, -15, 90, -7, 70, 94, 48, 52, -34, 39, 27, 5, 36, 34, 40, -47, 77, 42, -82, -86, 14, 18, -90, -72, -71, -13, -28, 43, 86, -82, -57, -73, -17, 34, -93, -80, -57, -35, 88, -15, -6, 50, 34, 79, -80, -34, 39, 98, 61, 90, 64, 14, -73, 68, -6, 82, 29, 27, -87, 24, -89, -57, -30, 8, 96, -65, 63, 58, -3, -95, -82, 6, -57, -83, 14, -8, -23, 51, 57, 79, 90, -38, -16, 83, -7, -67, 9, 77, -22, -43, 52, -70, 90, -34, 21, -86, 30, 41, 94, -47, 69, 29, -34, 50, 30, -1, -24, 54, 8, -100, 46, 9, -42, -25, -34, 58, -82, -77, 24, -20, 74, 51, 5, -74, -82, 78, -39, 40, 51, 66, -48, -31, -76, -50, 15, 24, -20, -69, -83, -56, -17, 76, -88, 81, -34, -88, 92, 57, 31, -83, -77, -38, 37, -80, -77, -45, 66, -18, 42, -78, -37, -52, -39, -63, 16, -31, 8, -3, -75, 18, -62, -38, 19, -97, -4, 49, -92, 40, 41, -34, 46, 90, -90, -68, 79, 33, 53, 63, 66, 44, 30, 59, -3, -38, 68, 71, -78, -28, -86, 59, -68, 29, -87, 92, -97, 17, 15, 59, -88, 25, 9, 68, 67, -89, 65, 57, -77, 90, 91, 34, 67, -9, 76, 44, -70, -43, 8, -27, 13, -27, -92, 79, -47, -63, -64, 91, 0, 52, 74, -96, 28, -18, 7, 86, 95, 24, -87, -87, -40, -17, 29, -55, 16, 65, -41, 35, 18, -80, 87, -81, 86, 38, 47, 59, 1, 39, 70, 46, -16, 57, 3, -22, -93, -93, -91, 44, 49, -32, -82, -90, -80, 58, -96, 19, 83, 42, 49, -16, 5, 3, -98, -63, -32, -70, 28, -95, 100, 97, -41, -63, 68, -43, -17, -36, -31, 12, -44, 90, 33, -25, -52, 83, 52, 60, -9, 92, 34, -71, 79, 35, 39, -36, 57, -3, -37, 73, 12, 70, -12, 40, 98, 2, 30, -83, -33, 48, 76, 16, -7, -27, -48, -78, -79, 64, -5, 70, -30, 44, 66, -66, -27, -88, 62, -10, -52, -98, 100, 30, 26, 73, 84, -30, -40, -38, 13, -38, 95, 9, 38, 55, -79, -87, 14, -72, -61, -43, -46, 74, 91, 32, -88, -92, 31, -31, 6, -47, -50, 34, -97, 74, -39, 61, -97, -32, 47, 61, 82, -48, -89, 86, 17, -38, -28, 0, 40, -55, -100, 54, -85, 12, -53, -40, 11, -1, 86, 69, 20, -68, 89, -29, -63, 77, 97, 47, -10, -47, -43, 48, 53, -80, -5, 1, 56, -49, -73, 2, 30, 93, -98, 5, -45, -65, -97, -5, 73, -33, -84, 57, -100, -66, 25, -3, 78, 63, 29, -43, 0, -28, -69, -72, -35, -15, -99, -81, -88, 84, 5, -48, 20, -63, -5, 83, -38, 7, -10, -29, -70, 78, -26, -15, -15, -94, 47, -70, 27, 26, -81, -69, 52, 81, -91, 35, -38, -40, -18, 74, -25, -99, 76, 11, -69, 68, 40, 31, -59, 67, 28, 21, -91, -13, 10, 23, -86, 67, -14, 60, 51, 97, 44, 17, -3, 45, 97, -53, -81, -89, 91, -75, 81, -59, -81, -16, -91, 77, 27, -61, -80, 36, -92, 100, 39, -98, 57, -30, 43, -96, -2, 15, 64, -76, -98, -12, -15, 16, -21, -66, 5, 29, -3, 23, -48, 63, 94, -79, 47, -39, 69, -93, 74, 28, -94, -68, -14, 11, 56, 11, 71, -35, -31, -39, -4, -17, 36, 77, -21, -74, -62, 48, 80, 39, 25, 59, 55, -45, -26, -33, 73, 65, 77, -81, 38, -30, 34, 54, 7, -45, -22, 70, 5, 36, 16, 68, -91, -25, -73, 62, -28, 52, 33, -48, -25, 66, -53, -75, -77, 32, 3, -82, 46, -49, 60, 52, -97, 50, 100, 68, 29, 38, -16, -52, 11, 98, 100, -31, 50, 69, -87, 79, 49, -66, -55, -69, 61});
    
    // 900 recursive
    // vector<int> A({-22, -59, 70, -67, 11, 12, -20, -68, 8, -18, -17, -46, 2, -23, -67, 10, -24, -7, -39, -15, -72, 97, 62, 3, -69, 19, -3, 50, -55, 83, -5, 3, -48, 95, -27, -4, -59, -69, -94, -24, -16, 98, -75, -49, -87, -95, -6, 83, -75, 66, 63, -59, -91, -50, 87, 81, -95, 0, 29, 42, -12, -66, -12, 99, -47, 70, -83, -32, 93, 69, -80, -57, 13, 28, 22, -85, -95, 76, 96, 39, -80, 95, -19, -27, 78, 84, -26, -21, 33, 34, 3, 39, -63, -27, 71, -76, 44, -32, 33, -22, -69, -64, 99, -54, 21, -97, 5, -44, -45, 74, 75, -72, -43, 89, 51, -73, -16, -92, -50, -55, 87, 29, 19, 40, 31, 100, 54, 41, -95, -30, 9, 7, 0, 64, -84, 49, 20, -43, -23, -42, -27, 76, 9, 38, -46, -59, -57, 84, -40, 83, -79, -20, -97, -77, 0, -9, -87, 100, -40, -13, -91, 0, -74, -12, -38, 61, -33, -63, 65, -96, -57, 10, -97, -88, -2, -9, -15, -21, 23, 33, 20, -83, 21, 74, -48, 100, 15, 29, -62, -56, -80, -8, 50, 0, 41, -55, -60, -55, -71, -98, 4, 73, 3, 11, 55, 34, -77, -23, 69, 89, -82, 27, 59, -86, -3, 28, 76, 44, 52, 78, -93, -73, -12, -18, 56, -31, 97, -9, -25, 61, 30, -38, 88, -54, -33, 60, 80, -20, 15, 53, -34, -53, -76, -95, 0, -31, 58, -11, 85, 9, 34, -74, 17, 69, -29, -63, -42, 68, -61, 66, -98, 91, 99, 28, -11, 54, -20, 95, -22, -3, 47, 56, -19, -58, 10, 0, 34, 55, -23, -93, -23, -19, 2, 48, 58, -82, 14, -67, 77, -73, -11, 83, 68, -73, 23, -31, -81, 13, 32, 4, 7, -4, -72, 78, -22, 30, -5, 41, -79, 12, 10, 66, -35, -35, -49, -11, 37, -98, 42, 76, 25, -60, 83, 70, -99, -89, -74, 75, -12, 55, 13, 85, 74, -48, 34, 32, 78, -99, 37, 64, 47, -22, 80, -60, 98, 78, 92, 14, -57, -7, 64, -92, -95, -87, 55, 95, 1, -8, -58, -30, 69, 82, 36, -41, -11, -100, -66, -97, 24, 7, -85, -1, 78, 14, 93, -2, -71, -71, 99, 92, 46, 78, -86, 39, 12, -85, -92, -100, 99, 36, -88, 9, -47, 64, 67, -16, 14, -57, 4, -53, 86, -83, -44, 78, 98, 71, 77, 6, 71, 47, 40, -78, -82, -93, 4, -9, 35, 69, 61, 46, 26, 41, -84, 48, 62, 45, -13, 72, -5, -89, 94, 72, -77, -77, 92, -45, 35, 46, 81, -51, -44, 91, 72, -33, 10, 24, 85, -53, -69, 3, 12, 29, 50, -94, -23, 13, 30, 29, 53, 79, -61, 1, 60, -52, 41, 18, 2, -92, -94, -29, -96, -22, 24, -51, 2, -1, -1, 0, -26, -29, -50, -65, 76, -24, 30, -6, 12, -14, -17, -84, -65, 97, 15, -52, 95, 26, 81, 22, 17, -24, -24, 79, 90, 60, -12, 38, 83, -71, 26, 23, -44, -94, 4, 26, -4, -9, 69, -93, -66, 11, 59, -32, 23, -51, 65, 13, -2, 9, -94, -87, -16, -87, 38, -83, -64, -100, 73, 95, 54, -25, -63, -27, -23, -80, -69, -19, -15, -30, 99, 53, 66, -57, -52, -64, 93, 70, 92, 57, -79, 31, -9, -46, 54, -30, -38, -72, 33, -2, 21, -54, 60, 86, -45, -26, -13, 15, 31, -1, 33, 71, -9, 77, -41, 90, -100, 23, 35, -44, 9, 22, -24, 24, -61, -69, -21, -13, -64, -34, -81, 57, -39, -1, -52, 85, 99, 2, 42, -37, 45, -51, -18, -55, 97, 67, 89, 80, -70, 79, -73, -35, 1, -91, -57, 70, 98, -76, -96, -7, 74, -30, -24, 13, 15, -39, 19, 7, 44, 19, -57, -96, 9, 6, -38, -87, -63, 39, 46, -99, 49, -26, 37, -37, 60, -21, 9, 82, -55, -33, -80, 9, -86, -71, 100, -30, 6, -80, 38, 61, -97, -90, -90, 24, -17, 95, -4, 77, -66, 43, 0, 60, -10, -31, 5, 90, -1, -86, 77, -56, 31, -97, -52, 36, -58, -66, -64, -75, -96, -51, 7, 47, -39, -18, -84, 35, 81, 79, -99, 14, 49, 91, -91, -91, 15, 62, 29, -33, -45, -40, -71, 76, -13, -87, 65, 9, -16, -92, -91, 14, 92, -91, 59, 28, -11, 31, -20, 70, -69, -89, 56, 47, 78, 76, -42, -74, -83, 94, 7, 41, 77, -12, -27, 7, -90, -36, -61, -37, 27, 39, 18, 41, -20, -69, -35, -100, 14, -87, -35, 26, -61, 89, -69, -84, -41, 19, -46, -55, -86, 9, 73, 57, 3, 57, -24, -24, -29, 6, 45, -29, -78, 40, 83, -22, 20, -37, -86, -17, -11, 12, -23, -86, 38, 91, -72, -97, -13, 30, 32, 80, 94, -83, 67, 14, -8, -74, -66, 48, -41, 98, 70, -48, -48, 60, 55, 65, 64, 88, 28, 50, 48, 84, -64, -17, 22, 78, -56, -100, 8, -17, -85, 31, 78, -42, 58, 35, 84, 64, 32, -79, -63, 32, 59, -94, 51, 46, 38, -43, 69, 49, -88, -46, 53, -77, -55, 47, 52, -52, -6, -70, -67, 26, 71, -51, -21, 1, 6, 2, -30, 100, -40, -46, 64, -91, 46, 24, -27, -35, 59, 52, -82, 88, -27, -45, -2, -7, -19, -4, -44, 56, -77, -88});
    
    // 925 recursive
    // vector<int> A({-5, 41, 85, 70, -8, 81, -76, 93, 83, -28, -94, 14, -93, 1, -35, -64, -38, -61, -56, -86, 98, -53, -12, -8, 15, -15, -67, -99, -80, 60, -6, 22, -89, -27, -7, -54, 60, -34, -4, 50, -14, -95, 74, -94, -81, 1, -89, 6, 77, -77, -73, -37, -74, -70, -96, 84, -14, 85, 43, -39, -11, -47, -3, 99, 13, -61, 75, -20, -13, 21, 71, -43, -74, -5, -73, 83, 10, 100, 8, -46, 89, 1, 31, 49, 49, 11, 79, 4, 69, 26, -99, 65, -59, -32, -34, -11, 17, 61, -9, 56, -93, -30, -98, 2, -58, -68, -58, 15, -14, -8, 68, -65, 62, -31, -36, -24, -68, -5, 0, -82, -34, 31, 2, 84, -61, -82, 75, -17, -40, 85, -10, 99, 45, 86, 38, -20, -5, 15, -22, 46, 37, -94, -100, 37, -27, 74, 17, 29, -93, 67, -33, -10, -21, -10, -45, -84, -85, -52, 77, -94, -26, 76, 6, 71, -43, 15, 64, -40, -76, 12, -51, -81, 57, 38, -75, -86, 39, 21, 28, 92, 52, 37, 48, -13, 53, -90, -12, 61, -98, 27, -17, -10, 82, 48, -95, -95, -11, 42, 94, 29, 84, 34, 1, 71, -17, 0, 62, -67, -6, -69, 60, -98, -93, 21, -14, -20, 31, -76, 93, 54, -24, 38, -22, 28, -44, -67, -91, -13, 63, 63, -57, 13, -80, -3, -19, -95, -41, -41, 66, 26, -94, 59, 51, 61, 18, -83, -25, -80, 66, -86, -17, -31, 88, 82, -67, 87, -50, -51, -79, -25, -94, -37, 81, 15, 3, 72, 46, -25, 44, 38, -45, 14, 96, 23, -81, 11, 82, 48, -3, 40, 75, -88, 37, -84, 51, -41, 13, -26, -24, -1, -77, -78, 71, -45, 65, -49, -49, 67, -20, 33, -90, -5, -37, -89, -36, -50, -21, 51, -15, -6, 32, -2, 13, -100, 5, -7, -79, 54, -9, 10, -85, 82, -43, 14, 100, 16, -27, 62, 20, -93, 0, 36, -72, 25, -88, 28, 51, -22, 79, 55, -82, -56, 19, -95, -25, 28, 39, -47, 47, 50, 83, 29, 48, -28, 7, -84, -11, -32, 29, -50, 46, 71, 31, -50, -64, -41, -43, -12, 36, 6, 47, -2, 39, -49, 80, 64, -96, 5, -2, -56, 82, 82, -14, 67, -45, -50, -67, 40, -98, -52, 2, -86, -17, -74, 69, -71, -26, 67, -67, -66, -63, 2, 31, 17, 26, -81, -95, 20, -63, 92, 40, -72, -98, 50, 7, 83, -98, 62, 24, -85, -92, 90, 72, -22, -95, -53, 27, 16, 70, 39, -22, 92, 30, 40, 93, -16, 70, -18, 99, -67, 0, 92, -89, 64, -16, -86, -59, 94, 73, 45, -90, -72, -59, -80, -21, 3, -49, 68, 51, -32, 76, 57, -88, -83, 96, -35, -31, -84, 61, -64, 91, 28, -14, 29, -98, -96, 23, 31, -70, -15, 39, -18, -85, -74, -69, 73, 99, 18, 19, 50, 98, -45, 55, 67, -27, 76, 17, 72, 30, -96, 13, 74, 4, 74, -59, 31, 41, 49, 92, 22, -97, -35, -8, 75, -17, -14, 88, 75, -17, -57, 83, -100, -12, -76, 20, -66, 70, -30, 22, -65, -46, -12, 49, 22, 23, -12, 53, 58, 96, 84, -100, -19, 20, -60, 76, 49, 59, 26, -36, -26, 63, 13, 51, 63, -72, 29, -16, 5, -76, 65, 10, 84, 43, -36, 32, 40, 67, -43, -64, 25, -31, 89, 1, 81, -92, -53, 81, 63, -42, -25, 35, 91, 11, -31, 56, -1, -87, 44, 13, 69, 48, -10, -28, -5, 12, 99, -25, -62, -36, 99, -52, -66, 91, -53, -77, 82, 54, 94, -94, -68, -39, 23, 41, -51, -35, -6, -42, 25, -82, 7, -54, 30, -75, 59, 52, 70, 8, 62, -2, 80, -36, -38, 50, -45, -44, 85, 83, 13, 88, -71, 32, -15, -80, 15, 62, 80, 75, -75, -76, -85, -53, -85, -8, -15, -4, 71, -37, 56, 66, 98, 40, 0, -45, -45, 12, -9, -31, -100, -14, 8, 49, 61, 58, -85, -88, -61, 30, 20, -61, -67, 33, 15, -74, -39, -97, 17, 29, 82, 71, 43, 29, -98, -77, -73, -28, 45, 19, -15, -6, -79, -35, 34, -30, -92, 45, -34, 5, -90, 55, -61, -81, -90, -53, 30, 33, -58, -14, 62, -74, -91, -73, -63, -21, -37, -5, 47, 17, 19, -75, -56, 81, -12, -54, 87, -2, -60, -50, 6, 96, 24, 33, 80, -36, 49, -34, 90, -38, -44, -17, -91, 33, 70, 19, -72, 58, -73, 97, 77, -39, -74, 13, -63, -20, 17, -100, -93, -36, -20, -15, 61, 70, -77, -25, 5, -93, 51, -5, 23, -69, -72, 83, -90, -47, -62, 1, 38, -29, -30, -44, 49, 36, 0, 80, -59, 69, 38, 62, 86, 24, -98, -45, 60, -45, -7, 26, -46, 89, 92, 24, 99, -1, -16, 12, -16, -16, 98, 88, 83, 42, -43, 39, 73, -74, 98, 56, 81, 67, 5, 8, -10, -12, -22, -34, 91, -9, 17, -8, -60, 75, -14, 35, -10, 93, 28, -7, 27, 67, -73, 3, -30, -6, -65, 87, -51, 44, -97, 9, 92, -10, -6, -9, -11, 79, 92, 53, 18, -70, 82, -93, -1, -13, -66, 93, 86, 88, 16, 91, -1, 39, 48, -25, -74, 5, -67, 15, 3, -61, -80, -80, 94, 79, -62, -60, 89, 35, 92, 27, -99, 3, 84, 0, 10, -17, -51, -97, 80, 18, 17, 78, 98, 13, -35, -3, 37, -35, -12, 18, -85, -62, -52, 25, -52, -14, 53, 25});
    
    // 1000 recursive
    // vector<int> A({28, -32, -84, 52, 44, -90, -35, -85, 47, -16, 97, -8, -45, 41, -25, -92, -22, 55, 10, 6, 35, 60, -30, 0, 53, -16, -81, -4, 52, 7, 34, 28, -100, 50, 10, 4, -36, 63, 38, 30, 60, 22, -30, -50, -30, 79, -49, -78, 61, -37, -70, -63, -99, -22, -42, -50, 83, -18, -7, -64, 74, -64, -59, -71, -99, 24, 31, -71, 88, -54, 26, -22, -77, -3, 78, -91, 70, 8, -7, -80, 91, 99, 0, -7, 36, -94, 92, 63, -13, 28, -62, -4, -61, 85, -29, -54, 81, 69, 46, 43, 29, -100, 77, -37, 85, 46, 16, -69, 14, -25, -46, -53, -34, 17, -94, -38, -56, 57, 16, -10, 92, -14, 27, 43, -98, -68, -11, 45, -55, -20, -5, -18, -16, -90, -97, -69, 61, -35, -89, 26, 88, 7, 12, -86, 16, 11, -93, -51, -93, -53, -84, -90, -94, 80, 33, 64, 47, -60, 6, -53, -56, -31, 58, 39, 49, 72, 18, 36, 2, -16, -42, 71, 36, 98, 76, -62, -84, -80, 96, -80, 54, 47, 91, 88, -64, 27, 38, -42, -51, 49, 24, 67, -84, -15, 47, 87, -12, 93, -89, -2, -61, 22, -73, 8, 56, -63, -40, -38, -73, -87, 92, -27, -52, 18, -9, -67, 69, -73, 75, 95, -97, -80, -76, 61, 10, -34, -2, -97, 25, 73, 6, -88, 30, 84, 61, -65, -55, 56, -94, 77, -38, 31, -43, 40, -98, -38, 74, 31, -49, 9, 21, -12, 51, -72, 62, -2, 88, 52, 76, 1, -16, -4, 73, -91, 12, 22, -56, -20, 8, 98, -62, 82, -91, -66, -42, -99, 52, -17, 95, 14, -86, 12, 14, -8, 24, 42, 55, -13, 35, 0, 85, 70, 6, 87, 37, -11, -96, 1, 7, 70, -10, -91, 77, -64, 1, 10, -28, -88, 55, 66, 42, 98, -89, 51, 48, 41, 72, -45, -87, 37, 59, -51, -30, -37, -43, -38, -89, 85, 69, 72, -5, -73, -77, -44, 54, 78, -93, 34, 31, -10, 91, -20, -45, 5, 62, 96, -92, -40, 70, -77, -67, 46, -61, 24, 96, 39, -41, 15, -29, 89, -34, -53, 78, -1, -69, -38, -11, 77, 87, -68, -16, -10, 56, 40, -70, 63, 99, -7, -41, -63, 97, -18, -36, -71, -25, -9, -69, 17, 34, -60, -47, -24, -17, -58, 57, 92, 87, 18, -21, 91, 100, -70, 95, 77, -5, -30, 79, -45, 28, -88, -52, -11, 87, 55, 2, -28, 55, 20, -45, 20, 86, -55, -20, 19, 81, 8, 66, 82, -16, -89, -66, 70, -13, 17, -42, 7, -96, -75, -41, 30, 72, -98, -11, -100, 4, -37, 3, -99, 46, 24, -26, -46, -41, -39, 16, -32, 98, 19, -57, -14, -37, 38, 93, -77, 13, 27, 88, 59, -39, 27, -27, 10, -7, -19, 29, -24, -12, -40, -85, -56, 27, 23, -62, -79, -54, -88, -34, 65, 21, -70, 56, 5, 56, 98, -46, 23, -93, 29, -78, 60, 43, 71, 88, 12, -20, -56, -59, -80, -30, -9, 64, 66, 50, -58, 46, -3, 84, -63, 30, -48, -70, 43, -81, 97, -88, -88, -98, -82, 53, -88, 37, -10, 79, 53, -32, -7, -64, -2, -41, 55, -67, 37, 31, -18, 54, 66, -85, -93, -70, -41, -100, -53, 41, -18, -42, -74, 82, -91, 71, 55, -30, 56, -63, 21, 24, 3, 46, 10, -19, 65, -18, -82, -51, 58, -25, 7, 13, -63, -86, 37, -72, 48, 58, 23, 71, 6, -70, -58, 74, -11, 50, 68, 10, -44, -20, 25, -5, -17, -69, 79, -53, 46, 58, 85, -99, 46, -49, -64, 19, -62, -25, -30, -97, -11, -82, 45, 21, -45, -68, 52, -83, 97, -90, 4, 3, -39, -100, -44, -28, 18, 87, -57, -48, -86, 41, -67, -53, -57, 63, -45, 39, 6, 20, 91, -9, 100, -47, -75, 31, 13, -26, 23, 14, 40, 81, 71, 25, -84, -43, -94, 87, 59, -33, 23, 91, -24, -61, -64, -32, 38, 17, 93, 25, 68, -37, -32, -62, 29, -49, -32, 84, 59, 61, -79, 98, -56, 97, -9, -24, -41, 32, 17, 41, -80, 67, -3, -68, 25, 91, 39, 54, -66, 50, -73, -22, 65, 10, -31, -91, 95, 93, -90, 33, -46, 26, -9, -13, -100, 55, 13, 31, -95, 24, 86, 87, 73, 19, 2, -64, -47, -1, 85, -75, 90, 47, -23, 40, -69, 1, -46, -26, 91, 39, -1, 87, -46, -26, 18, -46, 93, 85, 87, 2, 27, 83, 40, -64, -21, -34, 86, -20, 67, -18, -46, 96, -75, 90, 17, 13, -60, -4, -15, -80, -91, -69, 99, 59, 65, 84, -80, -93, 32, -63, 80, -25, 41, 2, 29, -51, 30, -90, 66, 38, 49, -89, 23, 27, -59, -20, 70, -40, -92, -87, 87, -59, 52, 54, -13, -57, -57, -96, -16, 34, -20, 87, -78, -55, 73, 68, -70, 46, -30, 61, 1, -57, 9, 30, 30, 76, 30, 73, 7, 75, 7, -56, 39, 18, 44, 8, -65, -73, -88, 24, -79, 88, 49, -66, -21, 65, -48, 9, 75, -50, -42, -33, 96, 31, 42, 12, -53, -47, 67, -25, -72, 51, -24, 36, -86, 41, -44, 16, 84, -8, 18, 19, 81, 82, -11, 2, 41, -10, 19, 44, -1, -12, -68, -52, -19, -66, -72, 57, -36, -11, -75, -4, 42, -88, -54, -51, 82, 56, -73, -83, 55, 17, -67, -62, 2, -22, 59, 75, 32, 72, 62, 42, -81, -2, -16, 34, 22, 31, 39, 57, 51, 1, -46, 86, 40, 65, 84, 50, -77, 90, -72, 88, 71, 79, 9, -50, 8, -29, 40, 55, 65, -31, 4, 91, -90, 29, 0, 0, 40, -21, 86, -73, 48, -35, -54, 18, -73, 34, -64, -12, 79, 94, -75, 30, -64, 51, 90, -87, 76, 34, 47, -4, -25, -90, 88, -98, -24, 54, -50, 17, 11, 23, 72, -75, -44, -67, -40, 12, 97, 40, -5, -59, -71, -27, -62, -10, -12});
    test_brute_force(A);
    test_recursive(A);
    test_recursive_with_brute_force(A);
}
